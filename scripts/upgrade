#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
port=$(ynh_app_setting_get --app=$app --key=port)

#=================================================
# CHECK VERSION
#=================================================
ynh_print_info --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info --message="Ensuring downward compatibility..."

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
    db_name=$(ynh_sanitize_dbid --db_name=$app)
    ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

#=================================================
# CHECK VERSION NUMBER
#=================================================

if [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
  sleep 60
fi
abort_if_up_to_date
# previous function is what defines 'version', more precisely the 'previous version'
previous_version="${version}"

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path --path_url=$path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_print_info --message="Stopping a systemd service..."

ynh_systemd_action --service_name=$app --action="stop" --log_path=systemd

#=================================================
# MANAGE UPGRADE FROM PREVIOUS VERSION
#=================================================
ynh_print_info --message="Managing upgrade from previous version..."

if ynh_version_gt "0.45-2" "${previous_version}" ; then
    ynh_print_info --message="Upgrading to 0.45-2..."
    ynh_replace_string --match_string="Environment=ROOT_URL=http://127.0.0.1:$port$path_url" --replace_string="Environment=ROOT_URL=https://$domain$path_url/" --target_file="/etc/systemd/system/$app.service"
    systemctl daemon-reload
fi

if ynh_version_gt "0.45-3" "${previous_version}" ; then
    ynh_print_info --message="Upgrading to 0.45-3..."
    yunohost service add $app
fi

if ynh_version_gt "1.07~ynh2" "${previous_version}" ; then
    ynh_print_info --message="Upgrading to 1.07~ynh2..."

   # Replace mongodb packages
   # Assume no other app needs it >.>
   rm -f /etc/apt/sources.list.d/mongodb-org-3.2.list
   ynh_remove_app_dependencies
   ynh_install_app_dependencies "mongodb mongodb-server"
   yunohost service remove mongod
   yunohost service add mongodb --log "/var/log/mongodb/mongodb.log"
fi

if ynh_version_gt "2.56~ynh1" "${previous_version}" ; then
    # Create a dedicated .env config
    config_file="$final_path/.env"
    touch $config_file
fi

# Create the permission "admin" only if it doesn't exist.
if ! ynh_permission_exists --permission="admin"
then
  ynh_print_info --message="Upgrading Permission configuration..."

	ynh_app_setting_delete --app=$app --key=unprotected_uris

  is_public=$(ynh_app_setting_get --app=$app --key=is_public)

  if [ $is_public -eq 1 ]; then
    ynh_permission_update --permission "main" --add "visitors"
  fi

	ynh_app_setting_delete --app=$app --key=is_public

  ynh_permission_create --permission="admin"
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_print_info --message="Upgrading source files..."
		
  # Create a temporary directory
  tmpdir="$(mktemp -d)"

  # Backup the env file in the temp dir
  cp -a "$final_path/.env" "$tmpdir/.env"

  # Remove the app directory securely
  ynh_secure_remove --file="$final_path"

  architecture=$(ynh_detect_arch)
  # Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
  
  #Copy the admin saved settings from tmp directory to final path
  cp -a  "$tmpdir/.env" "$final_path/.env"
  
  # Remove the tmp directory securely
  ynh_secure_remove --file="$tmpdir"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info --message="Upgrading dependencies..."

ynh_remove_nodejs
ynh_install_nodejs --nodejs_version=$nodejsversion
ynh_use_nodejs

if [ "$(lsb_release --codename --short)" = "buster" ]; then
  ynh_install_extra_app_dependencies --repo="deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main" --package="$pkg_dependencies_buster" --key="https://www.mongodb.org/static/pgp/server-4.2.asc"
  mongodb_servicename=$mongodb_buster
else
  ynh_install_app_dependencies $pkg_dependencies
  mongodb_servicename=$mongodb_stretch
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_print_info --message="Modifying a config file..."

# Create a dedicated .env config
config_file="$final_path/.env"
ynh_backup_if_checksum_is_different --file="$config_file"
cp "../conf/.env" "$config_file"
ynh_replace_string --match_string="__NODEJS_PATH__" --replace_string="$nodejs_path" --target_file="$config_file"
ynh_replace_string --match_string="__DB_NAME__" --replace_string="$db_name" --target_file="$config_file"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$config_file"
ynh_replace_string --match_string="__DOMAIN_URI__" --replace_string="$domain$path_url" --target_file="$config_file"
ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="$config_file"
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$config_file"
ynh_store_file_checksum "$config_file"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info --message="Upgrading systemd configuration..."

# Create a dedicated systemd config
ynh_replace_string --match_string="__NODEJS_PATH__" --replace_string="$nodejs_path" --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__MONGODB_SERVICENAME__" --replace_string="$mongodb_servicename" --target_file="../conf/systemd.service"
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_print_info --message="Securing files and directories..."

# Set permissions on app files
chown -R $app: "$final_path"
chmod -R 640 "$final_path"
find "$final_path" -type d -print0 | xargs -0 chmod 750

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_print_info --message="Starting a systemd service..."

ynh_systemd_action --service_name=$app --action="start" --log_path=systemd --line_match="Started Wekan, task board"
if [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
  sleep 60
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info --message="Upgrade of $app completed"
